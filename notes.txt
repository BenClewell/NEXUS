1/10/21

the defense range can cover anywhere from 1-100, and activates the firewall every time
Every time the firewall is defeated, it becomes stronger. 

if you lose to the firewall, your results are jammed, but the firewall decreases in difficulty
the firewall range is revealed to you at the start of turn 3, along with the sonar. 

after turn 4, you learn if the nexus key is inside or outside the defense range

useless code?
    def make_guess():
        """user enters a node guess to find the key
        rejected if entry is too long, or not valid"""
        print(
            "----------------------------------------------\nENTER A NODE (between 1 and 100):\n"
        )
        try:
            valid = True
            P1.guess = int(input())
            if len(str(P1.guess)) > 3 or P1.guess > 100:
                valid = False
                print("This node is TOO HIGH.")
                print("PLEASE ENTER A VALID NODE.")
                P1.make_guess()
        except:
            valid = False
            print("I don't understand this node.")
            print("PLEASE ENTER A VALID NODE.")
            P1.make_guess()
        if valid == True and P1.guess != 0:
            ascii_nodeguess = pyfiglet.figlet_format("NODE  " + str(P1.guess))
            print(ascii_nodeguess)
        if P1.guess == 0:
            P1.hacker_history()

    def reduce_chance():
        P1.chances -= 1
        print("\n----------------------------------------------\n")

        if P1.tripwire == False:
            if P1.guess < P1.entry_key:
                """if guess is lower than the nexus key"""
                P1.high_keys -= 1
                if P1.high_keys != 0:
                    print(
                        "LOW NODE ENTRY DETECTED: "
                        + str(P1.high_keys)
                        + " LOW ENTRIES UNTIL SYSTEM LOCK"
                    )
                    time.sleep(0.5)
                    if P1.high_keys == 1:
                        print(
                            "APPROACHING LOW NODE OVERLOAD. ONE MORE LOW NODE WILL ENGAGE SYSTEM LOCK."
                        )
                    time.sleep(1)
                    P1.guess_list.append("(LOW)")

            else:
                """if guess is higher than the nexus key"""
                P1.low_keys -= 1
                if P1.low_keys != 0:
                    print(
                        "HIGH NODE ENTRY DETECTED: "
                        + str(P1.low_keys)
                        + " HIGH ENTRIES UNTIL SYSTEM LOCK"
                    )
                    time.sleep(0.5)
                    if P1.low_keys == 1:
                        print(
                            "APPROACHING HIGH NODE OVERLOAD. ONE MORE HIGH NODE WILL ENGAGE SYSTEM LOCK."
                        )
                    time.sleep(1)
                    P1.guess_list.append("(HIGH)")

        if P1.tripwire == True:
            """punishment for landing in defense range"""
            P1.high_keys -= 1
            P1.low_keys -= 1
            print("JAMMED: NO NODE INFORMATION POSSIBLE")
            print("LOW NODE GUESSES REDUCED BY 1")
            print("HIGH NODE GUESSES REDUCED BY 1")
            P1.guess_list.append("(JAMMED)")
            P1.tripwire = False
